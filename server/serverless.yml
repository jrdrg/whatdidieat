service: whatdidieat

plugins:
  - serverless-webpack
  #- serverless-dynamodb-local
  - serverless-offline

custom:
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: false
    packager: yarn

provider:
  name: aws
  runtime: nodejs6.10

  # you can overwrite defaults here
  stage: dev
  region: us-east-2

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - entitiesTable
          - Arn

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  sayHello:
    handler: lib/js/src/hello.hello
    events:
      - http:
          path: hello
          method: get
          cors: true
  createUser:
    handler: lib/js/src/User.createUser
    events:
      - http:
          path: users
          method: post
          cors: true
  listUsers:
    handler: lib/js/src/User.listUsers
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-2:150092540173:userpool/us-east-2_ScBS6jS5q
  getUser:
    handler: lib/js/src/User.getUser
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                limit: false
              paths:
                id: true

resources:
  Resources:
    # userPool:
    #   Type: AWS::Cognito::UserPool
    #   Properties:
    #     UserPoolName: ${self:service}-
    entitiesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: WhatDidIEat
        AttributeDefinitions:
          - AttributeName: entity_id
            AttributeType: S
          - AttributeName: related_entity_id
            AttributeType: S
        KeySchema:
          - AttributeName: entity_id
            KeyType: HASH
          - AttributeName: related_entity_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    entitiesTableArn:
      Description: The ARN for the entity table
      Value:
        Fn::GetAtt:
          - entitiesTable
          - Arn
      Export:
        Name: ${self:service}:${opt:stage, self:provider.stage}:entitiesTableArn
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2
